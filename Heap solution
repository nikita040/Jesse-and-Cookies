import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {
    static void buildHeap(int []a, int n){
        
        int startIndex = (n/2) - 1;
        for(int i = startIndex ; i>=0 ;i--){
            heapify(a, n, i);
        }
        
    }

    static void heapify(int []a , int n, int i){
        int smallest = i;
        int left = 2*i + 1;
        int right = 2*i + 2;

        if(left<n && a[left]<a[smallest]){
            smallest = left;
        }

        if(right<n && a[right]<a[smallest]){
            smallest = right;
        }

        if(smallest!= i){
            int swap = a[i];
            a[i] = a[smallest];
            a[smallest] = swap;

            heapify(a,n,smallest);
        }

    }

    
    
    static int cookies(int k, int[] A) {

        int n = A.length;

        if(n ==0){
            System.out.println("n==0");
            return 0;
        }
        else if(n ==1){
            System.out.println("n==1");
            if(A[0]>=k){
                return 0;
            }
            else{
                return -1;
            }
        }

        else if(n==2){
            System.out.println("n==2");
            buildHeap(A, n);
            
            if(A[0] >= k){
                return 0;
            }
            else{
                int num = A[0] + 2*A[1];
                if(num<k){
                    return -1;
                }
                else{
                    return 1;
                }
            }
        }

        else if(n ==3){
            System.out.println("n==3");
            buildHeap(A, n);
            if(A[0] >= k){
                return 0;
            }
            else{
                int sec = (A[1]>A[2])?A[2]:A[1];
                int num = A[0] + 2* sec; 
                int []arr = new int[2];
                arr[0] = num;
                arr[1] = (sec==A[1])? A[2] : A[1];
                if(arr[0]>=k && arr[1]>=k ){
                    return 1;
                }
                else{
                    int temp = cookies(k, arr);
                    
                    if(temp == -1){
                        return -1;
                    }
                    else{
                        return 1+ temp;
                    }
                }
                
            }
                
        }
        
        else{
            System.out.println("greater than 3");
            buildHeap(A, n);
            int g =1;
            for(int j=0; j<n ;j++){
                if(A[j]<k){
                    break;
                }
                else{
                    g=0;
                }
            }
            if(g==0){
                return 0;
            }
            System.out.print(" ");
            if(A[0] >= k){
                return 0;
            }
            else{
                int sec = (A[1]>A[2])?A[2]:A[1];
                int num = A[0] + 2* sec; 
                int []arr = new int[n-1];
                arr[0] = num;
                arr[1] = (sec==A[1])? A[2] : A[1];
                int j=2;
                for(int i= 3 ;i< n ;i++){
                    arr[j] = A[i];
                    j++;
                }
                
                
                int temp = cookies(k, arr);
                if(temp == -1){
                    return -1;
                }
                else{
                    return 1+ temp;
                }
        
                
            }

        }

       
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nk = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nk[0].trim());

        int k = Integer.parseInt(nk[1].trim());

        int[] A = new int[n];

        String[] AItems = scanner.nextLine().split(" ");

        for (int AItr = 0; AItr < n; AItr++) {
            int AItem = Integer.parseInt(AItems[AItr].trim());
            A[AItr] = AItem;
        }

        int result = cookies(k, A);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
